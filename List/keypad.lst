
AVRASM ver. 2.1.30  D:\naminic\AVR-Board\Project Files\Impelemented AVR proj\Keypad\Avr-keypad 4.3\List\keypad.asm Tue Aug 12 13:02:33 2014

D:\naminic\AVR-Board\Project Files\Impelemented AVR proj\Keypad\Avr-keypad 4.3\List\keypad.asm(1072): warning: Register r4 already defined by the .DEF directive
D:\naminic\AVR-Board\Project Files\Impelemented AVR proj\Keypad\Avr-keypad 4.3\List\keypad.asm(1073): warning: Register r6 already defined by the .DEF directive
D:\naminic\AVR-Board\Project Files\Impelemented AVR proj\Keypad\Avr-keypad 4.3\List\keypad.asm(1074): warning: Register r9 already defined by the .DEF directive
D:\naminic\AVR-Board\Project Files\Impelemented AVR proj\Keypad\Avr-keypad 4.3\List\keypad.asm(1075): warning: Register r8 already defined by the .DEF directive
D:\naminic\AVR-Board\Project Files\Impelemented AVR proj\Keypad\Avr-keypad 4.3\List\keypad.asm(1076): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _row=R4
                 	.DEF _column=R6
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 7250
000034 7365
000035 2073
000036 6e41      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x41,0x6E
000037 2079
000038 654b
000039 3a79
00003a 4c00      	.DB  0x79,0x20,0x4B,0x65,0x79,0x3A,0x0,0x4C
00003b 7361
00003c 2074
00003d 4f43
00003e 204c      	.DB  0x61,0x73,0x74,0x20,0x43,0x4F,0x4C,0x20
00003f 2026
000040 4f52
000041 3a57
000042 2500      	.DB  0x26,0x20,0x52,0x4F,0x57,0x3A,0x0,0x25
000043 6431
000044 4120
000045 444e
000046 2520      	.DB  0x31,0x64,0x20,0x41,0x4E,0x44,0x20,0x25
000047 6431
D:\naminic\AVR-Board\Project Files\Impelemented AVR proj\Keypad\Avr-keypad 4.3\List\keypad.asm(1119): warning: .cseg .db misalignment - padding zero byte
000048 0000      	.DB  0x31,0x64,0x0
                 _0x2020003:
000049 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004a 0002      	.DW  0x02
00004b 0260      	.DW  __base_y_G101
00004c 0092      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00004d 0000      	.DW  0
                 
                 __RESET:
00004e 94f8      	CLI
00004f 27ee      	CLR  R30
000050 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000051 e0f1      	LDI  R31,1
000052 bffb      	OUT  GICR,R31
000053 bfeb      	OUT  GICR,R30
000054 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000055 e1f8      	LDI  R31,0x18
000056 bdf1      	OUT  WDTCR,R31
000057 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000058 e08d      	LDI  R24,(14-2)+1
000059 e0a2      	LDI  R26,2
00005a 27bb      	CLR  R27
                 __CLEAR_REG:
00005b 93ed      	ST   X+,R30
00005c 958a      	DEC  R24
00005d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005f e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000060 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000061 93ed      	ST   X+,R30
000062 9701      	SBIW R24,1
000063 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000064 e9e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000065 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000066 9185      	LPM  R24,Z+
000067 9195      	LPM  R25,Z+
000068 9700      	SBIW R24,0
000069 f061      	BREQ __GLOBAL_INI_END
00006a 91a5      	LPM  R26,Z+
00006b 91b5      	LPM  R27,Z+
00006c 9005      	LPM  R0,Z+
00006d 9015      	LPM  R1,Z+
00006e 01bf      	MOVW R22,R30
00006f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000070 9005      	LPM  R0,Z+
000071 920d      	ST   X+,R0
000072 9701      	SBIW R24,1
000073 f7e1      	BRNE __GLOBAL_INI_LOOP
000074 01fb      	MOVW R30,R22
000075 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000076 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000077 bfed      	OUT  SPL,R30
000078 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000079 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007c 940c 009d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type               : ATmega32
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*****************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>  //for call sprintf.
                 ;#include <alcd.h>   //for lcd functions and definitions.
                 ;
                 ;
                 ;unsigned int row,column;
                 ;
                 ;void col_condition(int count)
                 ; 0000 0012 {
                 
                 	.CSEG
                 _col_condition:
                 ; 0000 0013   if((PINC & 0x70)==0x60)
00007e 93ba      	ST   -Y,R27
00007f 93aa      	ST   -Y,R26
                 ;	count -> Y+0
000080 b3e3      	IN   R30,0x13
000081 77e0      	ANDI R30,LOW(0x70)
000082 36e0      	CPI  R30,LOW(0x60)
000083 f429      	BRNE _0x3
                 ; 0000 0014   {
                 ; 0000 0015     column=count+1;
000084 940e 0360 	CALL SUBOPT_0x0
                 ; 0000 0016     row=1;
000086 e0e1      	LDI  R30,LOW(1)
000087 e0f0      	LDI  R31,HIGH(1)
000088 012f      	MOVW R4,R30
                 ; 0000 0017   }
                 ; 0000 0018   if((PINC & 0x70)==0x50)
                 _0x3:
000089 b3e3      	IN   R30,0x13
00008a 77e0      	ANDI R30,LOW(0x70)
00008b 35e0      	CPI  R30,LOW(0x50)
00008c f429      	BRNE _0x4
                 ; 0000 0019   {
                 ; 0000 001A     column=count+1;
00008d 940e 0360 	CALL SUBOPT_0x0
                 ; 0000 001B     row=2;
00008f e0e2      	LDI  R30,LOW(2)
000090 e0f0      	LDI  R31,HIGH(2)
000091 012f      	MOVW R4,R30
                 ; 0000 001C   }
                 ; 0000 001D   if((PINC & 0x70)==0x30)
                 _0x4:
000092 b3e3      	IN   R30,0x13
000093 77e0      	ANDI R30,LOW(0x70)
000094 33e0      	CPI  R30,LOW(0x30)
000095 f429      	BRNE _0x5
                 ; 0000 001E   {
                 ; 0000 001F     column=count+1;
000096 940e 0360 	CALL SUBOPT_0x0
                 ; 0000 0020     row=3;
000098 e0e3      	LDI  R30,LOW(3)
000099 e0f0      	LDI  R31,HIGH(3)
00009a 012f      	MOVW R4,R30
                 ; 0000 0021   }
                 ; 0000 0022 }//end of col_condition.
                 _0x5:
00009b 940c 02d2 	JMP  _0x2080003
                 ;
                 ;void main(void)
                 ; 0000 0025 {
                 _main:
                 ; 0000 0026 
                 ; 0000 0027 int i=0;
                 ; 0000 0028 char lcd_result[10];
                 ; 0000 0029 unsigned char port_st[4]={0x0E,0x0D,0x0B,0x07};
                 ; 0000 002A // Port C initialization
                 ; 0000 002B // Func7=In Func6=In Func5=In Func4=In Func3=out Func2=Out Func1=Out Func0=Out
                 ; 0000 002C // State7=T State6=P State5=P State4=P State3=1 State2=1 State1=1 State0=1
                 ; 0000 002D PORTC=0x7F;
00009d 972e      	SBIW R28,14
00009e e0ee      	LDI  R30,LOW(14)
00009f 83e8      	ST   Y,R30
0000a0 e0ed      	LDI  R30,LOW(13)
0000a1 83e9      	STD  Y+1,R30
0000a2 e0eb      	LDI  R30,LOW(11)
0000a3 83ea      	STD  Y+2,R30
0000a4 e0e7      	LDI  R30,LOW(7)
0000a5 83eb      	STD  Y+3,R30
                 ;	i -> R16,R17
                 ;	lcd_result -> Y+4
                 ;	port_st -> Y+0
                +
0000a6 e000     +LDI R16 , LOW ( 0 )
0000a7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000a8 e7ef      	LDI  R30,LOW(127)
0000a9 bbe5      	OUT  0x15,R30
                 ; 0000 002E DDRC=0x0F;     //pins(0,1,2) defined as output with 1 value and pins(3,4,5,6) defined in with pull up.
0000aa e0ef      	LDI  R30,LOW(15)
0000ab bbe4      	OUT  0x14,R30
                 ; 0000 002F 
                 ; 0000 0030 lcd_init(16);   //initiate lcd.
0000ac e1a0      	LDI  R26,LOW(16)
0000ad 940e 031b 	CALL _lcd_init
                 ; 0000 0031 
                 ; 0000 0032 lcd_clear();
0000af 940e 0365 	CALL SUBOPT_0x1
                 ; 0000 0033 lcd_gotoxy(0,0);
                 ; 0000 0034 lcd_putsf("Press Any Key:");
                +
0000b1 e6a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000b2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000b3 940e 0308 	CALL _lcd_putsf
                 ; 0000 0035 
                 ; 0000 0036 while (1)
                 _0x6:
                 ; 0000 0037       {
                 ; 0000 0038        row=0;
0000b5 2444      	CLR  R4
0000b6 2455      	CLR  R5
                 ; 0000 0039        column=0;
0000b7 2466      	CLR  R6
0000b8 2477      	CLR  R7
                 ; 0000 003A 
                 ; 0000 003B        for(i=0;i<4;i++)      //3 is column in 4*3 matrix key.(3 is less)
                +
0000b9 e000     +LDI R16 , LOW ( 0 )
0000ba e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xA:
                +
0000bb 3004     +CPI R16 , LOW ( 4 )
0000bc e0e0     +LDI R30 , HIGH ( 4 )
0000bd 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
0000be f484      	BRGE _0xB
                 ; 0000 003C        {
                 ; 0000 003D          PORTC=((PORTC & 0xF0)| port_st[i]);
0000bf b3e5      	IN   R30,0x15
0000c0 7fe0      	ANDI R30,LOW(0xF0)
0000c1 2e0e      	MOV  R0,R30
0000c2 01de      	MOVW R26,R28
0000c3 0fa0      	ADD  R26,R16
0000c4 1fb1      	ADC  R27,R17
0000c5 91ec      	LD   R30,X
0000c6 29e0      	OR   R30,R0
0000c7 bbe5      	OUT  0x15,R30
                 ; 0000 003E          col_condition(i);
0000c8 01d8      	MOVW R26,R16
0000c9 dfb4      	RCALL _col_condition
                 ; 0000 003F          delay_ms(20);
0000ca 940e 036c 	CALL SUBOPT_0x2
                 ; 0000 0040        }//end of for.
                +
0000cc 5f0f     +SUBI R16 , LOW ( - 1 )
0000cd 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000ce cfec      	RJMP _0xA
                 _0xB:
                 ; 0000 0041 
                 ; 0000 0042        if(row!=0)
0000cf 2c04      	MOV  R0,R4
0000d0 2805      	OR   R0,R5
0000d1 f141      	BREQ _0xC
                 ; 0000 0043        {
                 ; 0000 0044           lcd_clear();
0000d2 940e 0365 	CALL SUBOPT_0x1
                 ; 0000 0045           lcd_gotoxy(0,0);
                 ; 0000 0046           lcd_putsf("Last COL & ROW:");
                +
0000d4 e7a5     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
0000d5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
0000d6 940e 0308 	CALL _lcd_putsf
                 ; 0000 0047 
                 ; 0000 0048           lcd_gotoxy(0,1);
0000d8 e0e0      	LDI  R30,LOW(0)
0000d9 93ea      	ST   -Y,R30
0000da e0a1      	LDI  R26,LOW(1)
0000db 940e 02c7 	CALL _lcd_gotoxy
                 ; 0000 0049           sprintf(lcd_result,"%1d AND %1d",column,row);
0000dd 01fe      	MOVW R30,R28
0000de 9634      	ADIW R30,4
0000df 93fa      	ST   -Y,R31
0000e0 93ea      	ST   -Y,R30
                +
0000e1 e8e5     +LDI R30 , LOW ( 2 * _0x0 + ( 31 ) )
0000e2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 31 ) )
                 	__POINTW1FN _0x0,31
0000e3 93fa      	ST   -Y,R31
0000e4 93ea      	ST   -Y,R30
0000e5 01f3      	MOVW R30,R6
0000e6 2766      	CLR  R22
0000e7 2777      	CLR  R23
0000e8 940e 03c1 	CALL __PUTPARD1
0000ea 01f2      	MOVW R30,R4
0000eb 2766      	CLR  R22
0000ec 2777      	CLR  R23
0000ed 940e 03c1 	CALL __PUTPARD1
0000ef e088      	LDI  R24,8
0000f0 940e 0273 	CALL _sprintf
0000f2 962c      	ADIW R28,12
                 ; 0000 004A           lcd_puts(lcd_result);
0000f3 01de      	MOVW R26,R28
0000f4 9614      	ADIW R26,4
0000f5 940e 02f9 	CALL _lcd_puts
                 ; 0000 004B           delay_ms(50);
0000f7 e3a2      	LDI  R26,LOW(50)
0000f8 940e 0370 	CALL SUBOPT_0x3
                 ; 0000 004C        }
                 ; 0000 004D 
                 ; 0000 004E       }//while(1)
                 _0xC:
0000fa cfba      	RJMP _0x6
                 ; 0000 004F }
                 _0xD:
0000fb cfff      	RJMP _0xD
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
0000fc 93ba      	ST   -Y,R27
0000fd 93aa      	ST   -Y,R26
0000fe 931a      	ST   -Y,R17
0000ff 930a      	ST   -Y,R16
000100 81aa      	LDD  R26,Y+2
000101 81bb      	LDD  R27,Y+2+1
000102 9612      	ADIW R26,2
000103 940e 03b9 	CALL __GETW1P
000105 9730      	SBIW R30,0
000106 f159      	BREQ _0x2000010
000107 81aa      	LDD  R26,Y+2
000108 81bb      	LDD  R27,Y+2+1
000109 9614      	ADIW R26,4
00010a 940e 03b9 	CALL __GETW1P
00010c 018f      	MOVW R16,R30
00010d 9730      	SBIW R30,0
00010e f061      	BREQ _0x2000012
                +
00010f 3002     +CPI R16 , LOW ( 2 )
000110 e0e0     +LDI R30 , HIGH ( 2 )
000111 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000112 f0f0      	BRLO _0x2000013
000113 01f8      	MOVW R30,R16
000114 9731      	SBIW R30,1
000115 018f      	MOVW R16,R30
                +
000116 81aa     +LDD R26 , Y + 2
000117 81bb     +LDD R27 , Y + 2 + 1
000118 9614     +ADIW R26 , 4
000119 93ed     +ST X + , R30
00011a 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00011b 81aa      	LDD  R26,Y+2
00011c 81bb      	LDD  R27,Y+2+1
00011d 9612      	ADIW R26,2
00011e 91ed      	LD   R30,X+
00011f 91fd      	LD   R31,X+
000120 9631      	ADIW R30,1
000121 93fe      	ST   -X,R31
000122 93ee      	ST   -X,R30
000123 9731      	SBIW R30,1
000124 81ac      	LDD  R26,Y+4
000125 83a0      	STD  Z+0,R26
000126 81aa      	LDD  R26,Y+2
000127 81bb      	LDD  R27,Y+2+1
000128 940e 03b9 	CALL __GETW1P
00012a 23ff      	TST  R31
00012b f02a      	BRMI _0x2000014
00012c 91ed      	LD   R30,X+
00012d 91fd      	LD   R31,X+
00012e 9631      	ADIW R30,1
00012f 93fe      	ST   -X,R31
000130 93ee      	ST   -X,R30
                 _0x2000014:
                 _0x2000013:
000131 c006      	RJMP _0x2000015
                 _0x2000010:
000132 81aa      	LDD  R26,Y+2
000133 81bb      	LDD  R27,Y+2+1
000134 efef      	LDI  R30,LOW(65535)
000135 efff      	LDI  R31,HIGH(65535)
000136 93ed      	ST   X+,R30
000137 93fc      	ST   X,R31
                 _0x2000015:
000138 8119      	LDD  R17,Y+1
000139 8108      	LDD  R16,Y+0
00013a 9625      	ADIW R28,5
00013b 9508      	RET
                 __print_G100:
00013c 93ba      	ST   -Y,R27
00013d 93aa      	ST   -Y,R26
00013e 9726      	SBIW R28,6
00013f 940e 03c6 	CALL __SAVELOCR6
000141 e010      	LDI  R17,0
000142 85ac      	LDD  R26,Y+12
000143 85bd      	LDD  R27,Y+12+1
000144 e0e0      	LDI  R30,LOW(0)
000145 e0f0      	LDI  R31,HIGH(0)
000146 93ed      	ST   X+,R30
000147 93fc      	ST   X,R31
                 _0x2000016:
000148 89ea      	LDD  R30,Y+18
000149 89fb      	LDD  R31,Y+18+1
00014a 9631      	ADIW R30,1
00014b 8bea      	STD  Y+18,R30
00014c 8bfb      	STD  Y+18+1,R31
00014d 9731      	SBIW R30,1
00014e 91e4      	LPM  R30,Z
00014f 2f2e      	MOV  R18,R30
000150 30e0      	CPI  R30,0
000151 f411      	BRNE PC+3
000152 940c 026b 	JMP _0x2000018
000154 2fe1      	MOV  R30,R17
000155 30e0      	CPI  R30,0
000156 f439      	BRNE _0x200001C
000157 3225      	CPI  R18,37
000158 f411      	BRNE _0x200001D
000159 e011      	LDI  R17,LOW(1)
00015a c002      	RJMP _0x200001E
                 _0x200001D:
00015b 940e 0373 	CALL SUBOPT_0x4
                 _0x200001E:
00015d c10c      	RJMP _0x200001B
                 _0x200001C:
00015e 30e1      	CPI  R30,LOW(0x1)
00015f f4a9      	BRNE _0x200001F
000160 3225      	CPI  R18,37
000161 f419      	BRNE _0x2000020
000162 940e 0373 	CALL SUBOPT_0x4
000164 c104      	RJMP _0x20000C9
                 _0x2000020:
000165 e012      	LDI  R17,LOW(2)
000166 e040      	LDI  R20,LOW(0)
000167 e000      	LDI  R16,LOW(0)
000168 322d      	CPI  R18,45
000169 f411      	BRNE _0x2000021
00016a e001      	LDI  R16,LOW(1)
00016b c0fe      	RJMP _0x200001B
                 _0x2000021:
00016c 322b      	CPI  R18,43
00016d f411      	BRNE _0x2000022
00016e e24b      	LDI  R20,LOW(43)
00016f c0fa      	RJMP _0x200001B
                 _0x2000022:
000170 3220      	CPI  R18,32
000171 f411      	BRNE _0x2000023
000172 e240      	LDI  R20,LOW(32)
000173 c0f6      	RJMP _0x200001B
                 _0x2000023:
000174 c002      	RJMP _0x2000024
                 _0x200001F:
000175 30e2      	CPI  R30,LOW(0x2)
000176 f439      	BRNE _0x2000025
                 _0x2000024:
000177 e050      	LDI  R21,LOW(0)
000178 e013      	LDI  R17,LOW(3)
000179 3320      	CPI  R18,48
00017a f411      	BRNE _0x2000026
00017b 6800      	ORI  R16,LOW(128)
00017c c0ed      	RJMP _0x200001B
                 _0x2000026:
00017d c004      	RJMP _0x2000027
                 _0x2000025:
00017e 30e3      	CPI  R30,LOW(0x3)
00017f f011      	BREQ PC+3
000180 940c 026a 	JMP _0x200001B
                 _0x2000027:
000182 3320      	CPI  R18,48
000183 f010      	BRLO _0x200002A
000184 332a      	CPI  R18,58
000185 f008      	BRLO _0x200002B
                 _0x200002A:
000186 c007      	RJMP _0x2000029
                 _0x200002B:
000187 e0aa      	LDI  R26,LOW(10)
000188 9f5a      	MUL  R21,R26
000189 2d50      	MOV  R21,R0
00018a 2fe2      	MOV  R30,R18
00018b 53e0      	SUBI R30,LOW(48)
00018c 0f5e      	ADD  R21,R30
00018d c0dc      	RJMP _0x200001B
                 _0x2000029:
00018e 2fe2      	MOV  R30,R18
00018f 36e3      	CPI  R30,LOW(0x63)
000190 f449      	BRNE _0x200002F
000191 940e 037a 	CALL SUBOPT_0x5
000193 89e8      	LDD  R30,Y+16
000194 89f9      	LDD  R31,Y+16+1
000195 81a4      	LDD  R26,Z+4
000196 93aa      	ST   -Y,R26
000197 940e 0380 	CALL SUBOPT_0x6
000199 c0cf      	RJMP _0x2000030
                 _0x200002F:
00019a 37e3      	CPI  R30,LOW(0x73)
00019b f441      	BRNE _0x2000032
00019c 940e 037a 	CALL SUBOPT_0x5
00019e 940e 0386 	CALL SUBOPT_0x7
0001a0 940e 0347 	CALL _strlen
0001a2 2f1e      	MOV  R17,R30
0001a3 c00a      	RJMP _0x2000033
                 _0x2000032:
0001a4 37e0      	CPI  R30,LOW(0x70)
0001a5 f461      	BRNE _0x2000035
0001a6 940e 037a 	CALL SUBOPT_0x5
0001a8 940e 0386 	CALL SUBOPT_0x7
0001aa 940e 0353 	CALL _strlenf
0001ac 2f1e      	MOV  R17,R30
0001ad 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001ae 6002      	ORI  R16,LOW(2)
0001af 770f      	ANDI R16,LOW(127)
0001b0 e030      	LDI  R19,LOW(0)
0001b1 c035      	RJMP _0x2000036
                 _0x2000035:
0001b2 36e4      	CPI  R30,LOW(0x64)
0001b3 f011      	BREQ _0x2000039
0001b4 36e9      	CPI  R30,LOW(0x69)
0001b5 f411      	BRNE _0x200003A
                 _0x2000039:
0001b6 6004      	ORI  R16,LOW(4)
0001b7 c002      	RJMP _0x200003B
                 _0x200003A:
0001b8 37e5      	CPI  R30,LOW(0x75)
0001b9 f431      	BRNE _0x200003C
                 _0x200003B:
0001ba e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001bb e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001bc 83ee      	STD  Y+6,R30
0001bd 83ff      	STD  Y+6+1,R31
0001be e015      	LDI  R17,LOW(5)
0001bf c00d      	RJMP _0x200003D
                 _0x200003C:
0001c0 35e8      	CPI  R30,LOW(0x58)
0001c1 f411      	BRNE _0x200003F
0001c2 6008      	ORI  R16,LOW(8)
0001c3 c004      	RJMP _0x2000040
                 _0x200003F:
0001c4 37e8      	CPI  R30,LOW(0x78)
0001c5 f011      	BREQ PC+3
0001c6 940c 0269 	JMP _0x2000071
                 _0x2000040:
0001c8 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001c9 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001ca 83ee      	STD  Y+6,R30
0001cb 83ff      	STD  Y+6+1,R31
0001cc e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001cd ff02      	SBRS R16,2
0001ce c014      	RJMP _0x2000042
0001cf 940e 037a 	CALL SUBOPT_0x5
0001d1 940e 0390 	CALL SUBOPT_0x8
0001d3 85ab      	LDD  R26,Y+11
0001d4 23aa      	TST  R26
0001d5 f43a      	BRPL _0x2000043
0001d6 85ea      	LDD  R30,Y+10
0001d7 85fb      	LDD  R31,Y+10+1
0001d8 940e 03b5 	CALL __ANEGW1
0001da 87ea      	STD  Y+10,R30
0001db 87fb      	STD  Y+10+1,R31
0001dc e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001dd 3040      	CPI  R20,0
0001de f011      	BREQ _0x2000044
0001df 5f1f      	SUBI R17,-LOW(1)
0001e0 c001      	RJMP _0x2000045
                 _0x2000044:
0001e1 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001e2 c004      	RJMP _0x2000046
                 _0x2000042:
0001e3 940e 037a 	CALL SUBOPT_0x5
0001e5 940e 0390 	CALL SUBOPT_0x8
                 _0x2000046:
                 _0x2000036:
0001e7 fd00      	SBRC R16,0
0001e8 c011      	RJMP _0x2000047
                 _0x2000048:
0001e9 1715      	CP   R17,R21
0001ea f478      	BRSH _0x200004A
0001eb ff07      	SBRS R16,7
0001ec c008      	RJMP _0x200004B
0001ed ff02      	SBRS R16,2
0001ee c004      	RJMP _0x200004C
0001ef 7f0b      	ANDI R16,LOW(251)
0001f0 2f24      	MOV  R18,R20
0001f1 5011      	SUBI R17,LOW(1)
0001f2 c001      	RJMP _0x200004D
                 _0x200004C:
0001f3 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001f4 c001      	RJMP _0x200004E
                 _0x200004B:
0001f5 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001f6 940e 0373 	CALL SUBOPT_0x4
0001f8 5051      	SUBI R21,LOW(1)
0001f9 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001fa 2f31      	MOV  R19,R17
0001fb ff01      	SBRS R16,1
0001fc c017      	RJMP _0x200004F
                 _0x2000050:
0001fd 3030      	CPI  R19,0
0001fe f0a1      	BREQ _0x2000052
0001ff ff03      	SBRS R16,3
000200 c006      	RJMP _0x2000053
000201 81ee      	LDD  R30,Y+6
000202 81ff      	LDD  R31,Y+6+1
000203 9125      	LPM  R18,Z+
000204 83ee      	STD  Y+6,R30
000205 83ff      	STD  Y+6+1,R31
000206 c005      	RJMP _0x2000054
                 _0x2000053:
000207 81ae      	LDD  R26,Y+6
000208 81bf      	LDD  R27,Y+6+1
000209 912d      	LD   R18,X+
00020a 83ae      	STD  Y+6,R26
00020b 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00020c 940e 0373 	CALL SUBOPT_0x4
00020e 3050      	CPI  R21,0
00020f f009      	BREQ _0x2000055
000210 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000211 5031      	SUBI R19,LOW(1)
000212 cfea      	RJMP _0x2000050
                 _0x2000052:
000213 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000214 e320      	LDI  R18,LOW(48)
000215 81ee      	LDD  R30,Y+6
000216 81ff      	LDD  R31,Y+6+1
000217 940e 03bd 	CALL __GETW1PF
000219 87e8      	STD  Y+8,R30
00021a 87f9      	STD  Y+8+1,R31
00021b 81ee      	LDD  R30,Y+6
00021c 81ff      	LDD  R31,Y+6+1
00021d 9632      	ADIW R30,2
00021e 83ee      	STD  Y+6,R30
00021f 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000220 85e8      	LDD  R30,Y+8
000221 85f9      	LDD  R31,Y+8+1
000222 85aa      	LDD  R26,Y+10
000223 85bb      	LDD  R27,Y+10+1
000224 17ae      	CP   R26,R30
000225 07bf      	CPC  R27,R31
000226 f050      	BRLO _0x200005C
000227 5f2f      	SUBI R18,-LOW(1)
000228 85a8      	LDD  R26,Y+8
000229 85b9      	LDD  R27,Y+8+1
00022a 85ea      	LDD  R30,Y+10
00022b 85fb      	LDD  R31,Y+10+1
00022c 1bea      	SUB  R30,R26
00022d 0bfb      	SBC  R31,R27
00022e 87ea      	STD  Y+10,R30
00022f 87fb      	STD  Y+10+1,R31
000230 cfef      	RJMP _0x200005A
                 _0x200005C:
000231 332a      	CPI  R18,58
000232 f028      	BRLO _0x200005D
000233 ff03      	SBRS R16,3
000234 c002      	RJMP _0x200005E
000235 5f29      	SUBI R18,-LOW(7)
000236 c001      	RJMP _0x200005F
                 _0x200005E:
000237 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000238 fd04      	SBRC R16,4
000239 c01a      	RJMP _0x2000061
00023a 3321      	CPI  R18,49
00023b f420      	BRSH _0x2000063
00023c 85a8      	LDD  R26,Y+8
00023d 85b9      	LDD  R27,Y+8+1
00023e 9711      	SBIW R26,1
00023f f409      	BRNE _0x2000062
                 _0x2000063:
000240 c009      	RJMP _0x20000CA
                 _0x2000062:
000241 1753      	CP   R21,R19
000242 f010      	BRLO _0x2000067
000243 ff00      	SBRS R16,0
000244 c001      	RJMP _0x2000068
                 _0x2000067:
000245 c013      	RJMP _0x2000066
                 _0x2000068:
000246 e220      	LDI  R18,LOW(32)
000247 ff07      	SBRS R16,7
000248 c00b      	RJMP _0x2000069
000249 e320      	LDI  R18,LOW(48)
                 _0x20000CA:
00024a 6100      	ORI  R16,LOW(16)
00024b ff02      	SBRS R16,2
00024c c007      	RJMP _0x200006A
00024d 7f0b      	ANDI R16,LOW(251)
00024e 934a      	ST   -Y,R20
00024f 940e 0380 	CALL SUBOPT_0x6
000251 3050      	CPI  R21,0
000252 f009      	BREQ _0x200006B
000253 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000254 940e 0373 	CALL SUBOPT_0x4
000256 3050      	CPI  R21,0
000257 f009      	BREQ _0x200006C
000258 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000259 5031      	SUBI R19,LOW(1)
00025a 85a8      	LDD  R26,Y+8
00025b 85b9      	LDD  R27,Y+8+1
00025c 9712      	SBIW R26,2
00025d f008      	BRLO _0x2000059
00025e cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00025f ff00      	SBRS R16,0
000260 c008      	RJMP _0x200006D
                 _0x200006E:
000261 3050      	CPI  R21,0
000262 f031      	BREQ _0x2000070
000263 5051      	SUBI R21,LOW(1)
000264 e2e0      	LDI  R30,LOW(32)
000265 93ea      	ST   -Y,R30
000266 940e 0380 	CALL SUBOPT_0x6
000268 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
000269 e010      	LDI  R17,LOW(0)
                 _0x200001B:
00026a cedd      	RJMP _0x2000016
                 _0x2000018:
00026b 85ac      	LDD  R26,Y+12
00026c 85bd      	LDD  R27,Y+12+1
00026d 940e 03b9 	CALL __GETW1P
00026f 940e 03cd 	CALL __LOADLOCR6
000271 9664      	ADIW R28,20
000272 9508      	RET
                 _sprintf:
000273 92ff      	PUSH R15
000274 2ef8      	MOV  R15,R24
000275 9726      	SBIW R28,6
000276 940e 03c8 	CALL __SAVELOCR4
000278 940e 0398 	CALL SUBOPT_0x9
00027a 9730      	SBIW R30,0
00027b f419      	BRNE _0x2000072
00027c efef      	LDI  R30,LOW(65535)
00027d efff      	LDI  R31,HIGH(65535)
00027e c023      	RJMP _0x2080004
                 _0x2000072:
00027f 01de      	MOVW R26,R28
000280 9616      	ADIW R26,6
000281 940e 03b1 	CALL __ADDW2R15
000283 018d      	MOVW R16,R26
000284 940e 0398 	CALL SUBOPT_0x9
000286 83ee      	STD  Y+6,R30
000287 83ff      	STD  Y+6+1,R31
000288 e0e0      	LDI  R30,LOW(0)
000289 87e8      	STD  Y+8,R30
00028a 87e9      	STD  Y+8+1,R30
00028b 01de      	MOVW R26,R28
00028c 961a      	ADIW R26,10
00028d 940e 03b1 	CALL __ADDW2R15
00028f 940e 03b9 	CALL __GETW1P
000291 93fa      	ST   -Y,R31
000292 93ea      	ST   -Y,R30
000293 931a      	ST   -Y,R17
000294 930a      	ST   -Y,R16
000295 efec      	LDI  R30,LOW(_put_buff_G100)
000296 e0f0      	LDI  R31,HIGH(_put_buff_G100)
000297 93fa      	ST   -Y,R31
000298 93ea      	ST   -Y,R30
000299 01de      	MOVW R26,R28
00029a 961a      	ADIW R26,10
00029b dea0      	RCALL __print_G100
00029c 019f      	MOVW R18,R30
00029d 81ae      	LDD  R26,Y+6
00029e 81bf      	LDD  R27,Y+6+1
00029f e0e0      	LDI  R30,LOW(0)
0002a0 93ec      	ST   X,R30
0002a1 01f9      	MOVW R30,R18
                 _0x2080004:
0002a2 940e 03cf 	CALL __LOADLOCR4
0002a4 962a      	ADIW R28,10
0002a5 90ff      	POP  R15
0002a6 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
0002a7 93aa      	ST   -Y,R26
0002a8 b3e2      	IN   R30,0x12
0002a9 70ef      	ANDI R30,LOW(0xF)
0002aa 2fae      	MOV  R26,R30
0002ab 81e8      	LD   R30,Y
0002ac 7fe0      	ANDI R30,LOW(0xF0)
0002ad 2bea      	OR   R30,R26
0002ae bbe2      	OUT  0x12,R30
                +
0002af e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002b0 958a     +DEC R24
0002b1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002b2 9a92      	SBI  0x12,2
                +
0002b3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b4 958a     +DEC R24
0002b5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b6 9892      	CBI  0x12,2
                +
0002b7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b8 958a     +DEC R24
0002b9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002ba c08a      	RJMP _0x2080001
                 __lcd_write_data:
0002bb 93aa      	ST   -Y,R26
0002bc 81a8      	LD   R26,Y
0002bd dfe9      	RCALL __lcd_write_nibble_G101
0002be 81e8          ld    r30,y
0002bf 95e2          swap  r30
0002c0 83e8          st    y,r30
0002c1 81a8      	LD   R26,Y
0002c2 dfe4      	RCALL __lcd_write_nibble_G101
                +
0002c3 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002c4 958a     +DEC R24
0002c5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002c6 c07e      	RJMP _0x2080001
                 _lcd_gotoxy:
0002c7 93aa      	ST   -Y,R26
0002c8 81e8      	LD   R30,Y
0002c9 e0f0      	LDI  R31,0
0002ca 5ae0      	SUBI R30,LOW(-__base_y_G101)
0002cb 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0002cc 81e0      	LD   R30,Z
0002cd 81a9      	LDD  R26,Y+1
0002ce 0fae      	ADD  R26,R30
0002cf dfeb      	RCALL __lcd_write_data
0002d0 8099      	LDD  R9,Y+1
0002d1 8088      	LDD  R8,Y+0
                 _0x2080003:
0002d2 9622      	ADIW R28,2
0002d3 9508      	RET
                 _lcd_clear:
0002d4 e0a2      	LDI  R26,LOW(2)
0002d5 dfe5      	RCALL __lcd_write_data
0002d6 e0a3      	LDI  R26,LOW(3)
0002d7 940e 0370 	CALL SUBOPT_0x3
0002d9 e0ac      	LDI  R26,LOW(12)
0002da dfe0      	RCALL __lcd_write_data
0002db e0a1      	LDI  R26,LOW(1)
0002dc dfde      	RCALL __lcd_write_data
0002dd e0a3      	LDI  R26,LOW(3)
0002de 940e 0370 	CALL SUBOPT_0x3
0002e0 e0e0      	LDI  R30,LOW(0)
0002e1 2e8e      	MOV  R8,R30
0002e2 2e9e      	MOV  R9,R30
0002e3 9508      	RET
                 _lcd_putchar:
0002e4 93aa      	ST   -Y,R26
0002e5 81a8      	LD   R26,Y
0002e6 30aa      	CPI  R26,LOW(0xA)
0002e7 f011      	BREQ _0x2020005
0002e8 149b      	CP   R9,R11
0002e9 f048      	BRLO _0x2020004
                 _0x2020005:
0002ea e0e0      	LDI  R30,LOW(0)
0002eb 93ea      	ST   -Y,R30
0002ec 9483      	INC  R8
0002ed 2da8      	MOV  R26,R8
0002ee dfd8      	RCALL _lcd_gotoxy
0002ef 81a8      	LD   R26,Y
0002f0 30aa      	CPI  R26,LOW(0xA)
0002f1 f409      	BRNE _0x2020007
0002f2 c052      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0002f3 9493      	INC  R9
0002f4 9a90      	SBI  0x12,0
0002f5 81a8      	LD   R26,Y
0002f6 dfc4      	RCALL __lcd_write_data
0002f7 9890      	CBI  0x12,0
0002f8 c04c      	RJMP _0x2080001
                 _lcd_puts:
0002f9 93ba      	ST   -Y,R27
0002fa 93aa      	ST   -Y,R26
0002fb 931a      	ST   -Y,R17
                 _0x2020008:
0002fc 81a9      	LDD  R26,Y+1
0002fd 81ba      	LDD  R27,Y+1+1
0002fe 91ed      	LD   R30,X+
0002ff 83a9      	STD  Y+1,R26
000300 83ba      	STD  Y+1+1,R27
000301 2f1e      	MOV  R17,R30
000302 30e0      	CPI  R30,0
000303 f019      	BREQ _0x202000A
000304 2fa1      	MOV  R26,R17
000305 dfde      	RCALL _lcd_putchar
000306 cff5      	RJMP _0x2020008
                 _0x202000A:
000307 c010      	RJMP _0x2080002
                 _lcd_putsf:
000308 93ba      	ST   -Y,R27
000309 93aa      	ST   -Y,R26
00030a 931a      	ST   -Y,R17
                 _0x202000B:
00030b 81e9      	LDD  R30,Y+1
00030c 81fa      	LDD  R31,Y+1+1
00030d 9631      	ADIW R30,1
00030e 83e9      	STD  Y+1,R30
00030f 83fa      	STD  Y+1+1,R31
000310 9731      	SBIW R30,1
000311 91e4      	LPM  R30,Z
000312 2f1e      	MOV  R17,R30
000313 30e0      	CPI  R30,0
000314 f019      	BREQ _0x202000D
000315 2fa1      	MOV  R26,R17
000316 dfcd      	RCALL _lcd_putchar
000317 cff3      	RJMP _0x202000B
                 _0x202000D:
                 _0x2080002:
000318 8118      	LDD  R17,Y+0
000319 9623      	ADIW R28,3
00031a 9508      	RET
                 _lcd_init:
00031b 93aa      	ST   -Y,R26
00031c b3e1      	IN   R30,0x11
00031d 6fe0      	ORI  R30,LOW(0xF0)
00031e bbe1      	OUT  0x11,R30
00031f 9a8a      	SBI  0x11,2
000320 9a88      	SBI  0x11,0
000321 9a89      	SBI  0x11,1
000322 9892      	CBI  0x12,2
000323 9890      	CBI  0x12,0
000324 9891      	CBI  0x12,1
000325 80b8      	LDD  R11,Y+0
000326 81e8      	LD   R30,Y
000327 58e0      	SUBI R30,-LOW(128)
                +
000328 93e0 0262+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00032a 81e8      	LD   R30,Y
00032b 54e0      	SUBI R30,-LOW(192)
                +
00032c 93e0 0263+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00032e 940e 036c 	CALL SUBOPT_0x2
000330 940e 039f 	CALL SUBOPT_0xA
000332 940e 039f 	CALL SUBOPT_0xA
000334 940e 039f 	CALL SUBOPT_0xA
000336 e2a0      	LDI  R26,LOW(32)
000337 df6f      	RCALL __lcd_write_nibble_G101
                +
000338 ec88     +LDI R24 , LOW ( 200 )
000339 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00033a 9701     +SBIW R24 , 1
00033b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00033c e2a8      	LDI  R26,LOW(40)
00033d df7d      	RCALL __lcd_write_data
00033e e0a4      	LDI  R26,LOW(4)
00033f df7b      	RCALL __lcd_write_data
000340 e8a5      	LDI  R26,LOW(133)
000341 df79      	RCALL __lcd_write_data
000342 e0a6      	LDI  R26,LOW(6)
000343 df77      	RCALL __lcd_write_data
000344 df8f      	RCALL _lcd_clear
                 _0x2080001:
000345 9621      	ADIW R28,1
000346 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
000347 93ba      	ST   -Y,R27
000348 93aa      	ST   -Y,R26
000349 91a9          ld   r26,y+
00034a 91b9          ld   r27,y+
00034b 27ee          clr  r30
00034c 27ff          clr  r31
                 strlen0:
00034d 916d          ld   r22,x+
00034e 2366          tst  r22
00034f f011          breq strlen1
000350 9631          adiw r30,1
000351 cffb          rjmp strlen0
                 strlen1:
000352 9508          ret
                 _strlenf:
000353 93ba      	ST   -Y,R27
000354 93aa      	ST   -Y,R26
000355 27aa          clr  r26
000356 27bb          clr  r27
000357 91e9          ld   r30,y+
000358 91f9          ld   r31,y+
                 strlenf0:
000359 9005      	lpm  r0,z+
00035a 2000          tst  r0
00035b f011          breq strlenf1
00035c 9611          adiw r26,1
00035d cffb          rjmp strlenf0
                 strlenf1:
00035e 01fd          movw r30,r26
00035f 9508          ret
                 
                 	.DSEG
                 __base_y_G101:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000360 81e8      	LD   R30,Y
000361 81f9      	LDD  R31,Y+1
000362 9631      	ADIW R30,1
000363 013f      	MOVW R6,R30
000364 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000365 940e 02d4 	CALL _lcd_clear
000367 e0e0      	LDI  R30,LOW(0)
000368 93ea      	ST   -Y,R30
000369 e0a0      	LDI  R26,LOW(0)
00036a 940c 02c7 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00036c e1a4      	LDI  R26,LOW(20)
00036d e0b0      	LDI  R27,0
00036e 940c 03a7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000370 e0b0      	LDI  R27,0
000371 940c 03a7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
000373 932a      	ST   -Y,R18
000374 85ad      	LDD  R26,Y+13
000375 85be      	LDD  R27,Y+13+1
000376 85ef      	LDD  R30,Y+15
000377 89f8      	LDD  R31,Y+15+1
000378 9509      	ICALL
000379 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
00037a 89e8      	LDD  R30,Y+16
00037b 89f9      	LDD  R31,Y+16+1
00037c 9734      	SBIW R30,4
00037d 8be8      	STD  Y+16,R30
00037e 8bf9      	STD  Y+16+1,R31
00037f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000380 85ad      	LDD  R26,Y+13
000381 85be      	LDD  R27,Y+13+1
000382 85ef      	LDD  R30,Y+15
000383 89f8      	LDD  R31,Y+15+1
000384 9509      	ICALL
000385 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
000386 89a8      	LDD  R26,Y+16
000387 89b9      	LDD  R27,Y+16+1
000388 9614      	ADIW R26,4
000389 940e 03b9 	CALL __GETW1P
00038b 83ee      	STD  Y+6,R30
00038c 83ff      	STD  Y+6+1,R31
00038d 81ae      	LDD  R26,Y+6
00038e 81bf      	LDD  R27,Y+6+1
00038f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000390 89a8      	LDD  R26,Y+16
000391 89b9      	LDD  R27,Y+16+1
000392 9614      	ADIW R26,4
000393 940e 03b9 	CALL __GETW1P
000395 87ea      	STD  Y+10,R30
000396 87fb      	STD  Y+10+1,R31
000397 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000398 01de      	MOVW R26,R28
000399 961c      	ADIW R26,12
00039a 940e 03b1 	CALL __ADDW2R15
00039c 940e 03b9 	CALL __GETW1P
00039e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
00039f e3a0      	LDI  R26,LOW(48)
0003a0 940e 02a7 	CALL __lcd_write_nibble_G101
                +
0003a2 ec88     +LDI R24 , LOW ( 200 )
0003a3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003a4 9701     +SBIW R24 , 1
0003a5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003a6 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003a7 9610      	adiw r26,0
0003a8 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003a9 ed80     +LDI R24 , LOW ( 0x7D0 )
0003aa e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003ab 9701     +SBIW R24 , 1
0003ac f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003ad 95a8      	wdr
0003ae 9711      	sbiw r26,1
0003af f7c9      	brne __delay_ms0
                 __delay_ms1:
0003b0 9508      	ret
                 
                 __ADDW2R15:
0003b1 2400      	CLR  R0
0003b2 0daf      	ADD  R26,R15
0003b3 1db0      	ADC  R27,R0
0003b4 9508      	RET
                 
                 __ANEGW1:
0003b5 95f1      	NEG  R31
0003b6 95e1      	NEG  R30
0003b7 40f0      	SBCI R31,0
0003b8 9508      	RET
                 
                 __GETW1P:
0003b9 91ed      	LD   R30,X+
0003ba 91fc      	LD   R31,X
0003bb 9711      	SBIW R26,1
0003bc 9508      	RET
                 
                 __GETW1PF:
0003bd 9005      	LPM  R0,Z+
0003be 91f4      	LPM  R31,Z
0003bf 2de0      	MOV  R30,R0
0003c0 9508      	RET
                 
                 __PUTPARD1:
0003c1 937a      	ST   -Y,R23
0003c2 936a      	ST   -Y,R22
0003c3 93fa      	ST   -Y,R31
0003c4 93ea      	ST   -Y,R30
0003c5 9508      	RET
                 
                 __SAVELOCR6:
0003c6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003c7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003c8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003c9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003ca 931a      	ST   -Y,R17
0003cb 930a      	ST   -Y,R16
0003cc 9508      	RET
                 
                 __LOADLOCR6:
0003cd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003ce 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003cf 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003d0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003d1 8119      	LDD  R17,Y+1
0003d2 8108      	LD   R16,Y
0003d3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  15 r1 :   1 r2 :   0 r3 :   0 r4 :   6 r5 :   2 r6 :   3 r7 :   1 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  40 r17:  32 r18:  29 r19:   8 r20:   9 r21:  17 r22:   7 r23:   3 
r24:  23 r25:   5 r26: 109 r27:  41 r28:  18 r29:   1 r30: 197 r31:  64 
x  :  24 y  : 182 z  :  16 
Registers used: 29 out of 35 (82.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  28 and   :   0 andi  :  10 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  19 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  33 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  61 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   3 cpi   :  38 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  29 ld    :  27 ldd   :  80 ldi   : 107 
lds   :   0 lpm   :  16 lsl   :   0 lsr   :   0 mov   :  21 movw  :  24 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :   7 out   :  13 pop   :   1 push  :   1 rcall :  18 ret   :  25 
reti  :   0 rjmp  :  59 rol   :   0 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  21 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  66 std   :  36 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007a8   1888     72   1960   32768   6.0%
[.dseg] 0x000060 0x000264      0      4      4    2143   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
